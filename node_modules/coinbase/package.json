{
  "_args": [
    [
      {
        "raw": "coinbase@^2.0.7",
        "scope": null,
        "escapedName": "coinbase",
        "name": "coinbase",
        "rawSpec": "^2.0.7",
        "spec": ">=2.0.7 <3.0.0",
        "type": "range"
      },
      "/Users/uneeb123/Documents/Coinbase/AddrAppCoinbase"
    ]
  ],
  "_from": "coinbase@>=2.0.7 <3.0.0",
  "_id": "coinbase@2.0.7",
  "_inCache": true,
  "_location": "/coinbase",
  "_nodeVersion": "8.6.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/coinbase-2.0.7.tgz_1515524052910_0.6873045123647898"
  },
  "_npmUser": {
    "name": "cjs77",
    "email": "cayle@nimbustech.biz"
  },
  "_npmVersion": "5.5.1",
  "_phantomChildren": {},
  "_requested": {
    "raw": "coinbase@^2.0.7",
    "scope": null,
    "escapedName": "coinbase",
    "name": "coinbase",
    "rawSpec": "^2.0.7",
    "spec": ">=2.0.7 <3.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/coinbase/-/coinbase-2.0.7.tgz",
  "_shasum": "dac0845be2b98907a441efef459f637d13b81237",
  "_shrinkwrap": null,
  "_spec": "coinbase@^2.0.7",
  "_where": "/Users/uneeb123/Documents/Coinbase/AddrAppCoinbase",
  "author": {
    "name": "Coinbase"
  },
  "bugs": {
    "url": "https://github.com/coinbase/coinbase-node/issues"
  },
  "contributors": [
    {
      "name": "Coinbase",
      "email": "api@coinbase.com",
      "url": "https://developers.coinbase.com"
    }
  ],
  "dependencies": {
    "http-errors": "1.3.1",
    "lodash": "3.1.0",
    "object-assign": "2.0.0",
    "request": "2.74.0"
  },
  "description": "The Coinbase API for Node.js",
  "devDependencies": {
    "docco": "0.7.0",
    "mocha": "2.1.0",
    "nock": "0.59.1"
  },
  "directories": {
    "lib": "./lib"
  },
  "dist": {
    "integrity": "sha512-j2Qh/3dyXl8LfC64MEPEE5CO+iggrLtG25sQjOXu0sQoUa2acbWnhzSQjum8MYehZMvHjQGfZqN211dmzfP62w==",
    "shasum": "dac0845be2b98907a441efef459f637d13b81237",
    "tarball": "https://registry.npmjs.org/coinbase/-/coinbase-2.0.7.tgz"
  },
  "gitHead": "831b12d031095f014c790709f2127dc56fffa6c5",
  "homepage": "https://github.com/coinbase/coinbase-node",
  "keywords": [
    "API",
    "bitcoin",
    "coinbase",
    "real-time",
    "payments"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "cjs77",
      "email": "cayle@nimbustech.biz"
    },
    {
      "name": "maksim",
      "email": "maksimus16@gmail.com"
    },
    {
      "name": "coinbase",
      "email": "api@coinbase.com"
    }
  ],
  "name": "coinbase",
  "optionalDependencies": {},
  "readme": "# Coinbase\n\nThe official Node.js library for the [Coinbase API](https://developers.coinbase.com/api/v2).\n\n## Features\n\n* Full Test coverage.\n* Support for both [API Key + Secret](https://developers.coinbase.com/api/v2#api-key) and [OAuth 2](https://developers.coinbase.com/api/v2#oauth2-coinbase-connect) authentication.\n* Convenient methods for making calls to the API.\n* Automatic parsing of API responses into relevant Javascript objects.\n* Adheres to the nodejs error-first callback protocol.\n* Continuous Integration testing against node 0.10, 0.11, and 0.12.\n\n## Installation\n\n`npm install coinbase`\n\n## Version Compatibility\n\nVersion | GitHub repository\n--------|------------------\n`2.0.x` | This repository\n`0.1.x` | [mateodelnorte/coinbase](https://github.com/mateodelnorte/coinbase)\n\nNpm `coinbase` package name used to refer to the unofficial [coinbase](https://github.com/mateodelnorte/coinbase) library maintained by [Matt Walters](https://github.com/mateodelnorte). Matt graciously allowed us to use the name for this package instead. You can still find that package on [Github](https://github.com/mateodelnorte/coinbase). Thanks, Matt.\n\n## Quick Start\n\nThe first thing you'll need to do is [sign up for coinbase](https://coinbase.com).\n\n## API Key\n\nIf you're writing code for your own Coinbase account, [enable an API key](https://coinbase.com/settings/api). Next, create a ``Client`` object for interacting with the API:\n\n\n```javascript\nvar Client = require('coinbase').Client;\nvar client = new Client({'apiKey': mykey, 'apiSecret': mysecret});\n```\n\n## OAuth2\n\nIf you're writing code that will act on behalf of another user, start by\n[creating a new OAuth 2 application](https://coinbase.com/oauth/applications). You will need to do some work to obtain OAuth credentials for your users; while outside the scope of this document, please refer to our [OAuth 2 tutorial](https://developers.coinbase.com/docs/wallet/coinbase-connect/integrating) and [documentation](https://developers.coinbase.com/docs/wallet/coinbase-connect/reference). Once you have these credentials, create a client:\n\n```javascript\nvar Client = require('coinbase').Client;\nvar client = new Client({'accessToken': accessToken, 'refreshToken': refreshToken});\n```\n\n## Making API Calls\n\nWith a `client instance`, you can now make API calls. We've included some examples below, but in general the library has Javascript prototypes for each of the objects described in our [REST API documentation](https://developers.coinbase.com/api/v2).  These classes each have methods for making the relevant API calls; for instance, ``coinbase.model.Transaction.complete`` maps to the [complete bitcoin request](https://developers.coinbase.com/api/v2#complete-request-money) API endpoint. The comments of each method in the code references the endpoint it implements. Each API method returns an ``object`` representing the JSON response from the API.\n\n**Listing available accounts**\n\n```javascript\nvar coinbase = require('coinbase');\nvar client   = new coinbase.Client({'apiKey': mykey, 'apiSecret': mysecret});\n\nclient.getAccounts({}, function(err, accounts) {\n  accounts.forEach(function(acct) {\n    console.log('my bal: ' + acct.balance.amount + ' for ' + acct.name);\n  });\n});\n```\n\n**Get Balance from an Account Id**\n\n```javascript\nvar coinbase = require('coinbase');\nvar client   = new coinbase.Client({'apiKey': mykey, 'apiSecret': mysecret});\n\nclient.getAccount('<ACCOUNT ID>', function(err, account) {\n  console.log('bal: ' + account.balance.amount + ' currency: ' + account.balance.currency);\n});\n```\n\n**Selling bitcoin**\n\n```javascript\nvar args = {\n  \"amount\": \"12\",\n  \"currency\": \"BTC\"\n};\naccount.sell(args, function(err, xfer) {\n  console.log('my xfer id is: ' + xfer.id);\n});\n```\n\n**Sending bitcoin**\n\n```javascript\nvar args = {\n  \"to\": \"user1@example.com\",\n  \"amount\": \"1.234\",\n  \"currency\": \"BTC\",\n  \"description\": \"Sample transaction for you\"\n};\naccount.sendMoney(args, function(err, txn) {\n  console.log('my txn id is: ' + txn.id);\n});\n```\n\n**Requesting bitcoin**\n\n```javascript\nvar args = {\n  \"to\": \"user1@example.com\",\n  \"amount\": \"1.234\",\n  \"currency\": \"BTC\",\n  \"description\": \"Sample transaction for you\"\n};\naccount.requestMoney(args, function(err, txn) {\n  console.log('my txn id is: ' + txn.id);\n});\n```\n\n**Listing current transactions**\n\n```javascript\naccount.getTransactions(null, function(err, txns) {\n  txns.forEach(function(txn) {\n    console.log('my txn status: ' + txn.status);\n  });\n});\n```\n\n**Using pagination**\n\n```javascript\naccount.getTransactions(null, function(err, txns, pagination) {\n  txns.forEach(function(txn) {\n    console.log('my txn: ' + txn.id);\n  });\n  console.log(pagination.next_uri);\n  account.getTransactions(pagination, function(err, txns) {\n    txns.forEach(function(txn) {\n      console.log('my txn: ' + txn.id);\n    });\n  });\n});\n```\n\n**Checking bitcoin prices**\n\n```javascript\nclient.getBuyPrice({'currencyPair': 'BTC-USD'}, function(err, obj) {\n  console.log('total amount: ' + obj.data.amount);\n});\n```\n\n**Verifying merchant callback authenticity**\n```javascript\nif (client.verifyCallback(req.raw_body, req.headers['CB-SIGNATURE'])) {\n  // Process callback\n}\n```\n\n## Error Handling\n\nErrors are thrown for invalid arguments but are otherwise returned as the\nfirst argument to callback functions using [http-errors](https://github.com/jshttp/http-errors) module.\n\nErrors contain `name`, `status`, and `message` fields for error handling. You can find\nmore information about error types [here](https://developers.coinbase.com/api/v2#errors)\n\n## Testing / Contributing\n\nAny and all contributions are welcome! The process is simple:\n\n1. Fork this repo\n2. Make your changes and add tests\n3. Run the test suite\n4. Submit a pull request.\n\nTests are run via [mocha](http://mochajs.org) and [nock](https://github.com/pgte/nock). To run the tests, clone the repository and then:\n\n`npm install`\n\n`npm test`\n\nPlease also scan the packages for known vulnerabilities.\n\n```bash\nnpm install -g nsp\nnsp check --output summary\n```\n\nYou can also run the tests against various node environments using the Dockerfile.example file.\n\n1. `cp Dockerfile.example Dockerfile`\n2. edit Dockerfile and uncomment the node version that interests you\n3. `[sudo] docker build -t coinbase-node .`\n4. `[sudo] docker run -it coinbase-node`\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/coinbase/coinbase-node.git"
  },
  "scripts": {
    "test": "mocha -R spec"
  },
  "version": "2.0.7",
  "react-native": {
    "crypto": "react-native-crypto"
  },
  "browser": {
    "crypto": "react-native-crypto"
  }
}